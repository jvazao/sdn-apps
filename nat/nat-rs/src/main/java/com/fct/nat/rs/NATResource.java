//  (c) Copyright 2013 Hewlett-Packard Development Company, L.P.
//  Autogenerated
package com.fct.nat.rs;

import com.hp.sdn.rs.misc.ControllerResource;

import java.util.UUID;

import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.GET;
import javax.ws.rs.DELETE;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import com.fct.nat.model.NAT;
import com.fct.nat.api.NATService;

import com.hp.api.Id;

/**
 * Sample NAT REST API resource.
 */
//@Path("NAT")
public class NATResource extends ControllerResource {

    /**
     * Gets JSON array of all NAT items.
     * <p>
     * Normal Response Code(s): ok (200)
     * <p>
     * Error Response Codes: unauthorized (401), forbidden (403), badMethod
     * (405), serviceUnavailable (503)
     * 
     * @return JSON array
     */
    /*@GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAll() {
        //NATService svc = get(NATService.class);

        ObjectMapper mapper = new ObjectMapper();
        ObjectNode root = mapper.createObjectNode();
        //List<JsonNode> nodes = new ArrayList<JsonNode>();
        //for (NAT s : svc.getAll())
           //nodes.add(json(s, mapper));

        //ArrayNode rowNode = root.putArray("NAT");
        //rowNode.addAll(nodes);

        return ok(root.toString()).build();
    }*/

    /**
     * Creates a new NAT and registers it.
     * <p>
     * Normal Response Code(s): ok (200)
     * <p>
     * Error Response Codes: badRequest (400), unauthorized (401), forbidden (403), 
     * badMethod (405), serviceUnavailable (503)
     * 
     * @param request JSON representation of a NAT to be created
     * @return JSON object
     */
    /*@POST
    @Produces(MediaType.APPLICATION_JSON)
    public Response create(String request) {
        NATService svc = get(NATService.class);

        // Decode request
        ObjectMapper mapper = new ObjectMapper();
        JsonNode root = parse(mapper, request, "NAT data");
        JsonNode node = root.path("item");
        
        String name = exists(node, "name") ? node.path("name").asText() : null;

        // Call the service
        //NAT s = svc.create(name);

        // Encode response
        //return response(s, mapper).build();
    } */

    /**
     * Gets the specified NAT by its identifier.
     * <p>
     * Normal Response Code(s): ok (200)
     * <p>
     * Error Response Codes: badRequest (400), unauthorized (401), forbidden (403), 
     * badMethod (405), serviceUnavailable (503), itemNotFound (404)
     * 
     * @param uid the NAT unique identifier
     * @return JSON object
     */
    /*@GET
    @Path("{uid}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response get(@PathParam("uid") String uid) {
        //NATService svc = get(NATService.class);
        //Id<NAT, UUID> id = Id.valueOf(UUID.fromString(uid));
        //NAT s = svc.get(id);

        // Encode response
        //return response(s, new ObjectMapper()).build();
    }+/

    /**
     * Deletes the specified NAT.
     * <p>
     * Normal Response Code(s): ok (200)
     * <p>
     * Error Response Codes: badRequest (400), unauthorized (401), forbidden (403), 
     * badMethod (405), serviceUnavailable (503), itemNotFound (404)
     * 
     * @param uid the NAT unique identifier
     * @return no data
     */
    /*@DELETE
    @Path("{uid}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response delete(@PathParam("uid") String uid) {
        //NATService svc = get(NATService.class);
        //Id<NAT, UUID> id = Id.valueOf(UUID.fromString(uid));
        //svc.delete(id);
        // Encode response
        return Response.ok().build();
    }*/

    // Encode the response builder for the specified NAT
    private ResponseBuilder response(NAT s, ObjectMapper mapper) {
        ObjectNode r = mapper.createObjectNode();
        r.put("item", json(s, mapper));
        return ok(r.toString());
    }

    /**
     * Returns JSON string describing the given NAT information.
     * 
     * @param s the NAT
     * @param mapper JSON object mapper
     * @return the JSON node representing the specified NAT information
     */
    static JsonNode json(NAT s, ObjectMapper mapper) {
        ObjectNode node = mapper.createObjectNode();
        node.put("uid", s.getId().getValue().toString());
        node.put("name", s.name());
        return node;
    }

}
